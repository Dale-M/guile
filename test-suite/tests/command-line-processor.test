;;;; command-line-processor.test --- long options processing -*- scheme -*-
;;;;
;;;;	Copyright (C) 2001, 2006, 2011 Free Software Foundation, Inc.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
;;;; MA 02110-1301 USA

;;; Author:  Dale Mellor <guile-qf1qmg@rdmp.org> --- May 2020


(use-modules (test-suite lib)
             (ice-9 command-line-processor)
             (ice-9 regex))

(define-syntax-rule (pass-if-fatal-exception name exn exp)
     (let ((port (open-output-string)))
       (with-error-to-port port
         (λ ()
           (run-test
            name #t
            (λ ()
              (catch (car exn)
                (λ () exp #f)
                (λ (k . args)
                  (let ((output (get-output-string port)))
                    (close-port port)
                    (if (string-match (cdr exn) output)
                        #t
                        (error "Unexpected output" output)))))))))))

(defmacro deferr (name-frag re)
  (let ((name (symbol-append 'exception: name-frag)))
    `(define ,name (cons 'quit ,re))))

(deferr no-such-option              "no such option")
(deferr option-predicate-failed     "option predicate failed")
(deferr option-does-not-support-arg "option does not support argument")
(deferr option-must-be-specified    "option must be specified")
(deferr option-must-have-arg        "option must be specified with argument")



(with-test-prefix "exported procs"
  (pass-if "‘option’ defined"  (defined? 'process-command-line)))


(with-test-prefix "extended mcron options"

  (define  stdin-predicate  (λ (in) (or (string=? in "guile")
                                        (string=? in "vixie"))))
    
  (define  app  (command-line-specification
       application   "mcron"
       version       "1.4"
       usage         "[OPTIONS]... [FILES]..."
       help-preamble
  "Run an mcron process according to the specifications in the FILE... "
  "(`-' for standard input), or use all the files in ~/.config/cron "
  "(or the deprecated ~/.cron) with .guile or .vixie extensions.\n"
  "Note that --daemon and --schedule are mutually exclusive."
       option  (--daemon  -d
                      "run as a daemon process")
       option  (--stdin=guile  -j  (λ (in) (or (string=? in "guile")
                                               (string=? in "vixie")))
                      "format of data passed as standard input or file "
                      "arguments, 'guile' or 'vixie' (default guile)")
       option  (--stdin-2=guile  -k  (lambda (in) (or (string=? in "guile")
                                                      (string=? in "vixie")))
                      "format of data passed as standard input or file "
                      "arguments, 'guile' or 'vixie' (default guile)")
       option  (--stdin-3=guile  -l  stdin-predicate
                      "format of data passed as standard input or file "
                      "arguments, 'guile' or 'vixie' (default guile)")
       option  (--schedule=8  -s  string->number
                              "display the next N (or 8) jobs that will be run")
       option  (--not-complex short-i "this should just work")
       help-postamble
  "Mandatory or optional arguments to long options are also mandatory or "
  "optional for any corresponding short options."
       bug-address "bug-mcron@gnu.org"
       copyright   "2003, 2006, 2014, 2020  Free Software Foundation, Inc."
       license     GPLv3))

  (pass-if "specification transformed" #t)

  (process-command-line '("test" "-d" "leftover0" "--schedule=3" "leftover1"
                          "--stdin=vixie" "--stdin-2=guile" "--stdin-3" "vixie"
                          "-i")
                        app)
  (pass-if "process-command-line completed" #t)

  (pass-if "-d" (eq? --daemon #t))
  (pass-if "--schedule=3" (string=? --schedule "3"))
  (pass-if "--!" (equal? --! '("leftover0" "leftover1")))
  (pass-if "-j" (string=? --stdin "vixie"))
  (pass-if "-k" (string=? --stdin-2 "guile"))
  (pass-if "-l" (string=? --stdin-3 "vixie"))
  (pass-if "-i" (eq? --not-complex #t))

  (process-command-line  '("test" "-s9")  app)

  (pass-if "! -d" (eq? --daemon #f))
  (pass-if "-s9" (string=? --schedule "9"))

  )



(with-test-prefix "option merging"

   (process-command-line  (string-split "prog -a -b -d -h" #\space)
     (merge-command-line-specifications
       (command-line-specification
           application "test-1"
           option (-a --alpha "option alpha")
           option (-b --beta  "option beta")
           option (-h --eta   "option eta"))
       (command-line-specification
           application "test-2"
           option (-b --beta  "option beta")
           option (-d --delta "option delta"))))

   (pass-if "--alpha" (eq? #t --alpha))
   (pass-if "--beta"  (eq? #t --beta))
   (pass-if "--delta" (eq? #t --delta))
   (pass-if "--eta"   (eq? #t --eta))
   (pass-if "--beta-1" (eq? #f --beta-1))
   (pass-if "--help"  (eq? #f --help))

 )



(with-test-prefix "all option combinations"

   (define app (command-line-specification option (--alpha -a)))

   (pass-if "specification transformed" #t)

 )

                 
;;; command-line-processor.test ends here
